// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreMotion;
@import CoreLocation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSDate;
@class CMMotionActivity;
@class NSCoder;


/// A container class which holds and provides access to a variety of activity data.
SWIFT_CLASS("_TtC5trnql13ActivityEntry")
@interface ActivityEntry : NSObject <NSCoding>

/// A comma separated list of Strings representing the current activities.
@property (nonatomic, readonly, copy) NSString * _Nonnull activityString;

/// The confidence of the current detected activity.
@property (nonatomic, readonly, copy) NSString * _Nonnull confidence;

/// The date & time of when the reading was created as a NSDate object.
@property (nonatomic, readonly, strong) NSDate * _Nonnull timestampDate;

/// The time of when the reading was created in a human readable string.
@property (nonatomic, readonly, copy) NSString * _Nonnull timestampString;

/// A Boolean indicating whether or not user is in a vehicle.
@property (nonatomic, readonly) BOOL inVehicle;

/// A Boolean indicating whether or not user is automotive (in a vehicle).
@property (nonatomic, readonly) BOOL automotive;

/// A Boolean indicating whether or not user is on a bicycle.
@property (nonatomic, readonly) BOOL onBicycle;

/// A Boolean indicating whether or not user is cycling (on a bicycle).
@property (nonatomic, readonly) BOOL cycling;

/// A Boolean indicating whether or not user is on foot.
@property (nonatomic, readonly) BOOL onFoot;

/// A Boolean indicating whether or not user is running.
@property (nonatomic, readonly) BOOL running;

/// A Boolean indicating whether or not user is still.
@property (nonatomic, readonly) BOOL still;

/// A Boolean indicating whether or not user is stationary.
@property (nonatomic, readonly) BOOL stationary;

/// A Boolean indicating whether or not user is walking.
@property (nonatomic, readonly) BOOL walking;

/// The CMMotionActivity object generated by the CoreMotion framework.
@property (nonatomic, readonly, strong) CMMotionActivity * _Nullable motionActivity;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

@class CLPlacemark;


/// A container class which holds and provides access to a variety of address data.
SWIFT_CLASS("_TtC5trnql12AddressEntry")
@interface AddressEntry : NSObject <NSCoding>

/// The administrative area name of the address, for example, "CA", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable adminArea;

/// The country code of the address, for example "US", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;

/// The localized country name of the address, for example "Iceland", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable countryName;

/// The feature name of the address, for example, "Golden Gate Bridge", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable featureName;

/// The city of the address, for example "Mountain View", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable locality;

/// The postal code of the address, for example "94110", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;

/// The sub-administrative area name of the address, for example, "Santa Clara County", or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable subAdminArea;

/// The sub-locality of the address, or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable subLocality;

/// The street number of the address, or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable subThoroughfare;

/// The street name, or nil if it is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable thoroughfare;

/// The whole address.
@property (nonatomic, readonly, copy) NSString * _Nullable address;

/// The CLPlacemark object generated by the CoreLocation framework.
@property (nonatomic, readonly, strong) CLPlacemark * _Nonnull placemark;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end


@interface CMMotionActivity (SWIFT_EXTENSION(trnql))
@end



/// A container class which holds and provides access to a variety of weather data for the current day.
SWIFT_CLASS("_TtC5trnql17CurrentConditions")
@interface CurrentConditions : NSObject

/// A NSDate object representing today's sunrise time.
@property (nonatomic, readonly, strong) NSDate * _Nullable sunriseTime;

/// A NSDate object representing today's sunset time.
@property (nonatomic, readonly, strong) NSDate * _Nullable sunsetTime;

/// The dew point temperature with units, as a string.
///
/// <em>Note:</em> Please reference <code>englishUnits
/// </code> for the units.
@property (nonatomic, readonly, copy) NSString * _Nullable dewpointTemperatureString;

/// The current "feels like" temperature, which takes wind and lighting into account.
@property (nonatomic, readonly, copy) NSString * _Nullable feelsLikeTemperatureString;

/// The URL that you can download an image from, that represents the current weather conditions icon.
@property (nonatomic, readonly, copy) NSString * _Nullable iconURL;

/// A String that describes the current conditions.
@property (nonatomic, readonly, copy) NSString * _Nullable descriptionString;

/// The barometric pressure.
///
/// <em>Note:</em> Please reference <code>englishUnits
/// </code> for the units.
@property (nonatomic, readonly, copy) NSString * _Nullable pressureString;

/// The high wind speed.
@property (nonatomic, readonly, copy) NSString * _Nullable highWindSpeedString;

/// A NSDate object that represents the time that this data was generated.
@property (nonatomic, readonly, strong) NSDate * _Nullable observationTime;

/// A human readable String that represents the time that this data was generated.
@property (nonatomic, readonly, copy) NSString * _Nullable observationTimeString;

/// A NSDate object that represents the approximate time when the high temperature will be reached.
@property (nonatomic, readonly, strong) NSDate * _Nullable highTemperatureTime;

/// The current wind speed.
@property (nonatomic, readonly, copy) NSString * _Nullable currentWindSpeedString;

/// A simple string that can be displayed in a UI, which includes both high and low temp values for the day. Eg: "Hi: 80F | Lo: 50F".
@property (nonatomic, readonly, copy) NSString * _Nullable temperatureString;

/// The forecasted low temperature.
@property (nonatomic, readonly, copy) NSString * _Nullable lowTemperatureString;

/// The amount of rain.
@property (nonatomic, readonly, copy) NSString * _Nullable rainString;

/// The high wind speed.
@property (nonatomic, readonly, copy) NSString * _Nullable highWindSpeedShortString;

/// The current wind speed.
@property (nonatomic, readonly, copy) NSString * _Nullable currentWindSpeedShortString;

/// The forecasted high temperature.
@property (nonatomic, readonly, copy) NSString * _Nullable highTemperatureString;

/// The current humidity.
@property (nonatomic, readonly, copy) NSString * _Nullable humidityString;

/// A NSDate object that represents the approximate time when the lowest temperature will be reached.
@property (nonatomic, readonly, strong) NSDate * _Nullable lowTemperatureTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// The DayForecast object contains information relevant to the weather forecast for a particular day. This object is most commonly seen when WeatherEntry's getWeeklyForecast() method is called, which returns and ArrayList of DayForecast objects. The data for each DayForcast object is broken out into daytime forecast information and nighttime forecast information. A DayForecast object is not gauranteed to have both daytime and nighttime data. You can determine if a DayForecast object has daytime data by calling the isDayForecastAvailable() method, or if the object has nighttime data by calling the isNightForecastAvailable() method. You can access the data pertaining to these by calling the getDay() and getNight() accessor methods for each one.
SWIFT_CLASS("_TtC5trnql11DayForecast")
@interface DayForecast : NSObject

/// A concise prediction of the days's conditons as a String.
@property (nonatomic, readonly, copy) NSString * _Nullable dayShortPrediction;

/// A concise prediction of the night's conditons as a String.
@property (nonatomic, readonly, copy) NSString * _Nullable nightShortPrediction;

/// A more verbose prediction of the days's conditons as a String.
@property (nonatomic, readonly, copy) NSString * _Nullable dayLongPrediction;

/// A more verbose prediction of the night's conditons as a String.
@property (nonatomic, readonly, copy) NSString * _Nullable nightLongPrediction;

/// The URL that you can download an image from, that represents the day's weather conditions icon.
@property (nonatomic, readonly, copy) NSString * _Nullable dayIconURL;

/// The URL that you can download an image from, that represents the night's weather conditions icon.
@property (nonatomic, readonly, copy) NSString * _Nullable nightIconURL;

/// The forecasted high temperature.
@property (nonatomic, readonly, copy) NSString * _Nullable highTempString;

/// The forecasted low temperature.
@property (nonatomic, readonly, copy) NSString * _Nullable lowTempString;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class CLLocation;


/// A container class which holds and provides access to a variety of location data.
SWIFT_CLASS("_TtC5trnql13LocationEntry")
@interface LocationEntry : NSObject <NSCoding>

/// The time at which the location was determined as a NSDate object.
@property (nonatomic, readonly, strong) NSDate * _Nullable time;

/// The CLLocation object generated by the CoreLocation framework.
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end


@interface NSDate (SWIFT_EXTENSION(trnql))
@end


@interface NSNumber (SWIFT_EXTENSION(trnql))
@end


@interface NSObject (SWIFT_EXTENSION(trnql))
@end


SWIFT_PROTOCOL("_TtP5trnql26ObservablePropertyDelegate_")
@protocol ObservablePropertyDelegate
@optional

/// Tells the delegate that an observed property has been changed.
///
/// \param object The newly changed object.
///
/// \param key The key of the object being observed.
- (void)observablePropertyChange:(id _Nullable)object key:(NSString * _Nonnull)key;
@end


SWIFT_CLASS("_TtC5trnql25ObservablePropertyManager")
@interface ObservablePropertyManager : NSObject

/// Add a delegate who's observablePropertyChange(_:key:) will be called whenever the specified object is updated.
///
/// \param delegate The delegate to be notified of the change.
///
/// \param key The key of the object being observed.
+ (void)addDelegate:(id <ObservablePropertyDelegate> _Nonnull)delegate forKey:(NSString * _Nonnull)key;

/// Remove a delegate who's observablePropertyChange(_:key:) would be called whenever the specified object is updated.
///
/// \param delegate The delegate to be removed.
///
/// \param key The key of the object being observed.
+ (void)removeDelegate:(id <ObservablePropertyDelegate> _Nonnull)delegate forKey:(NSString * _Nonnull)key;

/// Get the object for the specified key.
///
/// \param key The key of the object being observed.
///
/// \returns  The object being observed.
+ (id _Nullable)objectForKey:(NSString * _Nonnull)key;

/// Check if the object being observed is equal to another object.
///
/// \param key The key of the object being observed.
///
/// \param isEqualTo The object to be compared.
///
/// \returns  A Boolean indicating the result of the comparison.
+ (BOOL)objectForKey:(NSString * _Nonnull)key isEqualTo:(id _Nonnull)object;

/// Set/update the object for the specified key.
///
/// \param object The object to be set.
///
/// \param key The key of the object to be observed.
+ (void)setObject:(id _Nonnull)object forKey:(NSString * _Nonnull)key;

/// Remove the object being observed for the specified key. The attached delegates will be notified and passed nil.\Note 
///
/// The object will be removed but the delegates will remain so if/when a new object is set the delegates will be updated.
///
/// \param delegate The delegate to be removed.
///
/// \param key The key of the object being observed.
+ (void)clearObjectForKey:(NSString * _Nonnull)key;

/// Returns true if there are delegates attached to the object being observed (specified by the key), false otherwise
///
/// \param key The key of the object being observed.
+ (BOOL)areDelegatesSetForObjectWithKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5trnql35PersistentObservablePropertyManager")
@interface PersistentObservablePropertyManager : NSObject

/// Add a delegate who's observablePropertyChange(_:key:) will be called whenever the specified object is updated.
///
/// \param delegate The delegate to be notified of the change.
///
/// \param key The key of the object being observed.
+ (void)addDelegate:(id <ObservablePropertyDelegate> _Nonnull)delegate forKey:(NSString * _Nonnull)key;

/// Remove a delegate who's observablePropertyChange(_:key:) would be called whenever the specified object is updated.
///
/// \param delegate The delegate to be removed.
///
/// \param key The key of the object being observed.
+ (void)removeDelegate:(id <ObservablePropertyDelegate> _Nonnull)delegate forKey:(NSString * _Nonnull)key;

/// Get the object for the specified key.
///
/// \param key The key of the object being observed.
///
/// \returns  The object being observed.
+ (id _Nullable)objectForKey:(NSString * _Nonnull)key;

/// Check if the object being observed is equal to another object.
///
/// \param key The key of the object being observed.
///
/// \param isEqualTo The object to be compared.
///
/// \returns  A Boolean indicating the result of the comparison.
+ (BOOL)objectForKey:(NSString * _Nonnull)key isEqualTo:(id _Nonnull)object;

/// Set/update the object for the specified key.
///
/// \param object The object to be set.
///
/// \param key The key of the object to be observed.
+ (void)setObject:(id <NSCoding> _Nonnull)object forKey:(NSString * _Nonnull)key;

/// Remove the object being observed for the specified key. The attached delegates will be notified and passed nil.\Note 
///
/// The object will be removed but the delegates will remain so if/when a new object is set the delegates will be updated.
///
/// \param delegate The delegate to be removed.
///
/// \param key The key of the object being observed.
+ (void)clearObjectForKey:(NSString * _Nonnull)key;

/// Returns true if there are delegates attached to the object being observed (specified by the key), false otherwise
///
/// \param key The key of the object being observed.
+ (BOOL)areDelegatesSetForObjectWithKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A container class which holds and provides access to a variety of place data.
SWIFT_CLASS("_TtC5trnql11PersonEntry")
@interface PersonEntry : NSObject <NSCoding>

/// The time (as milliseconds since since midnight, January 1, 1970 UTC) that this person's location was recorded.
@property (nonatomic, readonly, strong) NSDate * _Nullable timestamp;

/// The person's activity.
@property (nonatomic, readonly, copy) NSString * _Nullable userActivity;

/// The data payload.
@property (nonatomic, readonly, copy) NSString * _Nullable dataPayload;

/// The user token.
@property (nonatomic, readonly, copy) NSString * _Nullable userToken;

/// The platform the person is using (iOS or Android).
@property (nonatomic, readonly, copy) NSString * _Nullable platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

@class Review;
@class UIImage;


/// A container class which holds and provides access to a variety of place data.
SWIFT_CLASS("_TtC5trnql10PlaceEntry")
@interface PlaceEntry : NSObject <NSCoding>

/// The name of the place (typically the business name).
@property (nonatomic, readonly, copy) NSString * _Nullable name;

/// The unique ID for this place.
@property (nonatomic, readonly, copy) NSString * _Nullable placeID;

/// The whole address as a human-readable String.
@property (nonatomic, readonly, copy) NSString * _Nullable address;

/// The phone number in the local format.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;

/// The icon URL.
@property (nonatomic, readonly, copy) NSString * _Nullable iconURL;

/// The phone number in international format.
@property (nonatomic, readonly, copy) NSString * _Nullable intlPhoneNumber;

/// The price level as a human readable String.
@property (nonatomic, readonly, copy) NSString * _Nullable priceLevelString;

/// A list of reviews for this place.
@property (nonatomic, readonly, copy) NSArray<Review *> * _Nullable reviews;

/// A list of types (as PlaceType values) that categorize the place.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable types;

/// The URL to open the place in Google Maps.
@property (nonatomic, readonly, copy) NSString * _Nullable googleMapsURL;

/// A simplified address for the place including the street name, street number, and locality, but not the province/state, postal code, or country.
@property (nonatomic, readonly, copy) NSString * _Nullable vicinity;

/// The URL for the place's website.
@property (nonatomic, readonly, copy) NSString * _Nullable website;

/// The open hours for the establishment.
@property (nonatomic, readonly, copy) NSString * _Nullable hoursString;

/// An array of images pertaining to the place.
@property (nonatomic, readonly, copy) NSArray<UIImage *> * _Nullable images;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// The types of establishments that can be searched for and delivered to the smartPlacesChange(_: error:) delegate method.
SWIFT_CLASS("_TtC5trnql9PlaceType")
@interface PlaceType : NSObject

/// ACCOUNTING
+ (NSString * _Nonnull)ACCOUNTING;

/// AIRPORT
+ (NSString * _Nonnull)AIRPORT;

/// AMUSEMENT_PARK
+ (NSString * _Nonnull)AMUSEMENT_PARK;

/// AQUARIUM
+ (NSString * _Nonnull)AQUARIUM;

/// ART_GALLERY
+ (NSString * _Nonnull)ART_GALLERY;

/// ATM
+ (NSString * _Nonnull)ATM;

/// BAKERY
+ (NSString * _Nonnull)BAKERY;

/// BANK
+ (NSString * _Nonnull)BANK;

/// BAR
+ (NSString * _Nonnull)BAR;

/// BEAUTY_SALON
+ (NSString * _Nonnull)BEAUTY_SALON;

/// BICYCLE_STORE
+ (NSString * _Nonnull)BICYCLE_STORE;

/// BOOK_STORE
+ (NSString * _Nonnull)BOOK_STORE;

/// BOWLING_ALLEY
+ (NSString * _Nonnull)BOWLING_ALLEY;

/// BUS_STATION
+ (NSString * _Nonnull)BUS_STATION;

/// CAFE
+ (NSString * _Nonnull)CAFE;

/// CAMPGROUND
+ (NSString * _Nonnull)CAMPGROUND;

/// CAR_DEALER
+ (NSString * _Nonnull)CAR_DEALER;

/// CAR_RENTAL
+ (NSString * _Nonnull)CAR_RENTAL;

/// CAR_REPAIR
+ (NSString * _Nonnull)CAR_REPAIR;

/// CAR_WASH
+ (NSString * _Nonnull)CAR_WASH;

/// CASINO
+ (NSString * _Nonnull)CASINO;

/// CEMETERY
+ (NSString * _Nonnull)CEMETERY;

/// CHURCH
+ (NSString * _Nonnull)CHURCH;

/// CITY_HALL
+ (NSString * _Nonnull)CITY_HALL;

/// CLOTHING_STORE
+ (NSString * _Nonnull)CLOTHING_STORE;

/// CONVENIENCE_STORE
+ (NSString * _Nonnull)CONVENIENCE_STORE;

/// COURTHOUSE
+ (NSString * _Nonnull)COURTHOUSE;

/// DENTIST
+ (NSString * _Nonnull)DENTIST;

/// DEPARTMENT_STORE
+ (NSString * _Nonnull)DEPARTMENT_STORE;

/// DOCTOR
+ (NSString * _Nonnull)DOCTOR;

/// ELECTRICIAN
+ (NSString * _Nonnull)ELECTRICIAN;

/// ELECTRONICS_STORE
+ (NSString * _Nonnull)ELECTRONICS_STORE;

/// EMBASSY
+ (NSString * _Nonnull)EMBASSY;

/// ESTABLISHMENT
+ (NSString * _Nonnull)ESTABLISHMENT;

/// FINANCE
+ (NSString * _Nonnull)FINANCE;

/// FIRE_STATION
+ (NSString * _Nonnull)FIRE_STATION;

/// FLORIST
+ (NSString * _Nonnull)FLORIST;

/// FOOD
+ (NSString * _Nonnull)FOOD;

/// FUNERAL_HOME
+ (NSString * _Nonnull)FUNERAL_HOME;

/// FURNITURE_STORE
+ (NSString * _Nonnull)FURNITURE_STORE;

/// GAS_STATION
+ (NSString * _Nonnull)GAS_STATION;

/// GENERAL_CONTRACTOR
+ (NSString * _Nonnull)GENERAL_CONTRACTOR;

/// GROCERY_OR_SUPERMARKET
+ (NSString * _Nonnull)GROCERY_OR_SUPERMARKET;

/// GYM
+ (NSString * _Nonnull)GYM;

/// HAIR_CARE
+ (NSString * _Nonnull)HAIR_CARE;

/// HARDWARE_STORE
+ (NSString * _Nonnull)HARDWARE_STORE;

/// HEALTH
+ (NSString * _Nonnull)HEALTH;

/// HINDU_TEMPLE
+ (NSString * _Nonnull)HINDU_TEMPLE;

/// HOME_GOODS_STORE
+ (NSString * _Nonnull)HOME_GOODS_STORE;

/// HOSPITAL
+ (NSString * _Nonnull)HOSPITAL;

/// INSURANCE_AGENCY
+ (NSString * _Nonnull)INSURANCE_AGENCY;

/// JEWELRY_STORE
+ (NSString * _Nonnull)JEWELRY_STORE;

/// LAUNDRY
+ (NSString * _Nonnull)LAUNDRY;

/// LAWYER
+ (NSString * _Nonnull)LAWYER;

/// LIBRARY
+ (NSString * _Nonnull)LIBRARY;

/// LIQUOR_STORE
+ (NSString * _Nonnull)LIQUOR_STORE;

/// LOCAL_GOVERNMENT_OFFICE
+ (NSString * _Nonnull)LOCAL_GOVERNMENT_OFFICE;

/// LOCKSMITH
+ (NSString * _Nonnull)LOCKSMITH;

/// LODGING
+ (NSString * _Nonnull)LODGING;

/// MEAL_DELIVERY
+ (NSString * _Nonnull)MEAL_DELIVERY;

/// MEAL_TAKEAWAY
+ (NSString * _Nonnull)MEAL_TAKEAWAY;

/// MOSQUE
+ (NSString * _Nonnull)MOSQUE;

/// MOVIE_RENTAL
+ (NSString * _Nonnull)MOVIE_RENTAL;

/// MOVIE_THEATER
+ (NSString * _Nonnull)MOVIE_THEATER;

/// MOVING_COMPANY
+ (NSString * _Nonnull)MOVING_COMPANY;

/// MUSEUM
+ (NSString * _Nonnull)MUSEUM;

/// NIGHT_CLUB
+ (NSString * _Nonnull)NIGHT_CLUB;

/// PAINTER
+ (NSString * _Nonnull)PAINTER;

/// PARK
+ (NSString * _Nonnull)PARK;

/// PARKING
+ (NSString * _Nonnull)PARKING;

/// PET_STORE
+ (NSString * _Nonnull)PET_STORE;

/// PHARMACY
+ (NSString * _Nonnull)PHARMACY;

/// PHYSIOTHERAPIST
+ (NSString * _Nonnull)PHYSIOTHERAPIST;

/// PLACE_OF_WORSHIP
+ (NSString * _Nonnull)PLACE_OF_WORSHIP;

/// PLUMBER
+ (NSString * _Nonnull)PLUMBER;

/// POLICE
+ (NSString * _Nonnull)POLICE;

/// POST_OFFICE
+ (NSString * _Nonnull)POST_OFFICE;

/// REAL_ESTATE_AGENCY
+ (NSString * _Nonnull)REAL_ESTATE_AGENCY;

/// RESTAURANT
+ (NSString * _Nonnull)RESTAURANT;

/// ROOFING_CONTRACTOR
+ (NSString * _Nonnull)ROOFING_CONTRACTOR;

/// RV_PARK
+ (NSString * _Nonnull)RV_PARK;

/// SCHOOL
+ (NSString * _Nonnull)SCHOOL;

/// SHOE_STORE
+ (NSString * _Nonnull)SHOE_STORE;

/// SHOPPING_MALL
+ (NSString * _Nonnull)SHOPPING_MALL;

/// SPA
+ (NSString * _Nonnull)SPA;

/// STADIUM
+ (NSString * _Nonnull)STADIUM;

/// STORAGE
+ (NSString * _Nonnull)STORAGE;

/// STORE
+ (NSString * _Nonnull)STORE;

/// SUBWAY_STATION
+ (NSString * _Nonnull)SUBWAY_STATION;

/// SYNAGOGUE
+ (NSString * _Nonnull)SYNAGOGUE;

/// TAXI_STAND
+ (NSString * _Nonnull)TAXI_STAND;

/// TRAIN_STATION
+ (NSString * _Nonnull)TRAIN_STATION;

/// TRAVEL_AGENCY
+ (NSString * _Nonnull)TRAVEL_AGENCY;

/// UNIVERSITY
+ (NSString * _Nonnull)UNIVERSITY;

/// VETERINARY_CARE
+ (NSString * _Nonnull)VETERINARY_CARE;

/// ZOO
+ (NSString * _Nonnull)ZOO;

/// ADMINISTRATIVE_AREA_LEVEL_1
+ (NSString * _Nonnull)ADMINISTRATIVE_AREA_LEVEL_1;

/// ADMINISTRATIVE_AREA_LEVEL_2
+ (NSString * _Nonnull)ADMINISTRATIVE_AREA_LEVEL_2;

/// ADMINISTRATIVE_AREA_LEVEL_3
+ (NSString * _Nonnull)ADMINISTRATIVE_AREA_LEVEL_3;

/// ADMINISTRATIVE_AREA_LEVEL_4
+ (NSString * _Nonnull)ADMINISTRATIVE_AREA_LEVEL_4;

/// ADMINISTRATIVE_AREA_LEVEL_5
+ (NSString * _Nonnull)ADMINISTRATIVE_AREA_LEVEL_5;

/// COLLOQUIAL_AREA
+ (NSString * _Nonnull)COLLOQUIAL_AREA;

/// COUNTRY
+ (NSString * _Nonnull)COUNTRY;

/// FLOOR
+ (NSString * _Nonnull)FLOOR;

/// GEOCODE
+ (NSString * _Nonnull)GEOCODE;

/// INTERSECTION
+ (NSString * _Nonnull)INTERSECTION;

/// LOCALITY
+ (NSString * _Nonnull)LOCALITY;

/// NATURAL_FEATURE
+ (NSString * _Nonnull)NATURAL_FEATURE;

/// NEIGHBORHOOD
+ (NSString * _Nonnull)NEIGHBORHOOD;

/// POLITICAL
+ (NSString * _Nonnull)POLITICAL;

/// POINT_OF_INTEREST
+ (NSString * _Nonnull)POINT_OF_INTEREST;

/// POST_BOX
+ (NSString * _Nonnull)POST_BOX;

/// POSTAL_CODE
+ (NSString * _Nonnull)POSTAL_CODE;

/// POSTAL_CODE_PREFIX
+ (NSString * _Nonnull)POSTAL_CODE_PREFIX;

/// POSTAL_CODE_SUFFIX
+ (NSString * _Nonnull)POSTAL_CODE_SUFFIX;

/// POSTAL_TOWN
+ (NSString * _Nonnull)POSTAL_TOWN;

/// PREMISE
+ (NSString * _Nonnull)PREMISE;

/// ROOM
+ (NSString * _Nonnull)ROOM;

/// ROUTE
+ (NSString * _Nonnull)ROUTE;

/// STREET_ADDRESS
+ (NSString * _Nonnull)STREET_ADDRESS;

/// STREET_NUMBER
+ (NSString * _Nonnull)STREET_NUMBER;

/// SUBLOCALITY
+ (NSString * _Nonnull)SUBLOCALITY;

/// SUBLOCALITY_LEVEL_4
+ (NSString * _Nonnull)SUBLOCALITY_LEVEL_4;

/// SUBLOCALITY_LEVEL_5
+ (NSString * _Nonnull)SUBLOCALITY_LEVEL_5;

/// SUBLOCALITY_LEVEL_3
+ (NSString * _Nonnull)SUBLOCALITY_LEVEL_3;

/// SUBLOCALITY_LEVEL_2
+ (NSString * _Nonnull)SUBLOCALITY_LEVEL_2;

/// SUBLOCALITY_LEVEL_1
+ (NSString * _Nonnull)SUBLOCALITY_LEVEL_1;

/// SUBPREMISE
+ (NSString * _Nonnull)SUBPREMISE;

/// TRANSIT_STATION
+ (NSString * _Nonnull)TRANSIT_STATION;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A container class which holds the information of a review of a place.
SWIFT_CLASS("_TtC5trnql6Review")
@interface Review : NSObject <NSCoding>

/// The name of the review's author.
@property (nonatomic, readonly, copy) NSString * _Nullable authorName;

/// The URL to the author's Google+ profile (if available).
@property (nonatomic, readonly, copy) NSString * _Nullable authorURL;

/// An IETF language code indicating the language used in the review.
@property (nonatomic, readonly, copy) NSString * _Nullable language;

/// The textual review.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// The SmartActivity service.
SWIFT_CLASS("_TtC5trnql13SmartActivity")
@interface SmartActivity : NSObject

/// Boolean indidicating whether or not the SmartActivity service is running.
+ (BOOL)isEnabled;
+ (void)setIsEnabled:(BOOL)value;

/// Boolean inidicating whether or not this device has motion tracking capabilities.
+ (BOOL)deviceHasMotionTrackingCapability;

/// Starts the SmartActivity service.
///
/// Changes in activity are sent to the delegate in the form of an <code>ActivityEntry
/// </code> object.
+ (void)start;

/// Stops the SmartActivity service.
+ (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5trnql12SmartAddress")
@interface SmartAddress : NSObject

/// Boolean indidicating whether or not the SmartAddress service is running.
+ (BOOL)isEnabled;
+ (void)setIsEnabled:(BOOL)value;

/// Starts the SmartAddress service.
///
/// Changes in address are sent to the delegate in the form of an <code>AddressEntry
/// </code> object.
+ (void)start;

/// Stops the SmartAddress service.
+ (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5trnql16SmartFileManager")
@interface SmartFileManager : NSObject

/// Gets an object from persistence using a given key.
///
/// \returns  The object if it exists, <code>nil
/// </code> otherwise.
+ (id _Nullable)objectFromPersistenceForKey:(NSString * _Nonnull)key;

/// Removes an object from persistence using a given key.
///
/// \returns  True if successful, false otherwise.
+ (BOOL)removeObjectFromPersistenceForKey:(NSString * _Nonnull)key;

/// Saves an object to persistence using a given filename, folder, and optional subdirectory.\Note 
///
/// You do not need to include leading or trailing slashes in <code>subDirectory
/// </code>
///
/// \param object The object to be persisted.
///
/// \param filename The filename.
///
/// \param root The root folder name.
///
/// \param subDirectory The subdirectory file path relative to <code>root
/// </code>.
///
/// \param backupsAllowed Whether or not the object should be included in iCloud/iTunes backups.
///
/// \returns  True if successful, false otherwise.
+ (BOOL)persistObject:(id <NSCoding> _Nonnull)object named:(NSString * _Nonnull)filename toRootFolder:(NSSearchPathDirectory)root withSubDirectory:(NSString * _Nullable)subDirectory backupsAllowed:(BOOL)backupsAllowed;

/// Gets an object from persistence using a given filename, folder, and optional subdirectory.\Note 
///
/// You do not need to include leading or trailing slashes in <code>subDirectory
/// </code>
///
/// \param filename The filename.
///
/// \param root The root folder name.
///
/// \param subDirectory The subdirectory file path relative to <code>root
/// </code>.
///
/// \returns  The object if it exists, <code>nil
/// </code> otherwise.
+ (id _Nullable)objectFromPersistenceWithNamed:(NSString * _Nonnull)filename rootFolder:(NSSearchPathDirectory)rootFolder subDirectory:(NSString * _Nullable)subDirectory;

/// Removes an object from persistence using a given filename, folder, and optional subdirectory.\Note 
///
/// You do not need to include leading or trailing slashes in <code>subDirectory
/// </code>
///
/// \param filename The filename.
///
/// \param root The root folder name.
///
/// \param subDirectory The subdirectory file path relative to <code>root
/// </code>.
///
/// \returns  True if successful, false otherwise.
+ (BOOL)removeObjectFromPersistenceWithNamed:(NSString * _Nonnull)filename rootFolder:(NSSearchPathDirectory)rootFolder subDirectory:(NSString * _Nullable)subDirectory;

/// Sets whether or not the object for a given filename, folder, and optional subdirectory should be included in iCloud/iTunes backups.\Note 
///
/// You do not need to include leading or trailing slashes in <code>subDirectory
/// </code>
///
/// \param allowed Whether or not the object should be included in iCloud/iTunes backups.
///
/// \param filename The filename.
///
/// \param root The root folder name.
///
/// \param subDirectory The subdirectory file path relative to <code>root
/// </code>.
///
/// \returns  True if successful, false otherwise.
+ (BOOL)setBackupsAllowed:(BOOL)allowed forItemNamed:(NSString * _Nonnull)filename rootFolder:(NSSearchPathDirectory)rootFolder subDirectory:(NSString * _Nullable)subDirectory;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The SmartLocation service.
SWIFT_CLASS("_TtC5trnql13SmartLocation")
@interface SmartLocation : NSObject

/// Boolean indidicating whether or not the SmartLocation service is running.
+ (BOOL)isEnabled;

/// A Boolean indicating whether or not authorization has been granted for location monitoring.
+ (BOOL)isAuthorizedForLocationMonitoring;

/// The minimum distance (measured in meters) a device must move horizontally before an update event is generated. This distance is measured relative to the previously delivered location. The default value (-1.0) is used to be notified of all movements. Source: Apple
+ (double)desiredDistanceFilter;
+ (void)setDesiredDistanceFilter:(double)newValue;

/// The accuracy of the location data (meters).
+ (double)desiredLocationAccuracy;
+ (void)setDesiredLocationAccuracy:(double)newValue;

/// The accuracy of the location data (meters) when the user is stationary. This value is only used when automaticallyAdjustLocationAccuracy is true. The default value (100.0) provides results accurate to within 100 meters.
+ (double)desiredLocationAccuracyWhenStationary;
+ (void)setDesiredLocationAccuracyWhenStationary:(double)newValue;

/// The accuracy of the location data (meters) when the user is not stationary. This value is only used when automaticallyAdjustLocationAccuracy is true. The default value (-1.0) provides the best possible accuracy.
+ (double)desiredLocationAccuracyWhenNonStationary;
+ (void)setDesiredLocationAccuracyWhenNonStationary:(double)newValue;

/// Boolean indicating whether or not the location accuracy should be automatically determined. This can only be set to true iff SmartActivity is enabled.
+ (BOOL)automaticallyAdjustLocationAccuracy;
+ (void)setAutomaticallyAdjustLocationAccuracy:(BOOL)newValue;

/// The last reported location
+ (CLLocation * _Nullable)lastReportedLocation;

/// Start the SmartLocation service.
///
/// Changes in location are sent to the delegate in the form of a <code>LocationEntry
/// </code> object.
///
/// Location monitoring will begin immediately after the user has granted authorization; there is no need to stop and restart the service.
///
/// If <code>SmartActivity
/// </code> is enabled, location accuracy will automatically be determined based on the user's activity. Otherwise location accuracy will be set to Best.
+ (void)start;

/// Stop the SmartLocation service.
+ (void)stop;

/// Request the user's current location using the highest possible accuracy. The result will be delivered to the delegate's smartLocationChange(_:_:) method
+ (void)requestLocation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The SmartPeople service.
SWIFT_CLASS("_TtC5trnql11SmartPeople")
@interface SmartPeople : NSObject

/// The data payload to be uploaded. This is not required.
+ (NSString * _Nullable)dataPayload;
+ (void)setDataPayload:(NSString * _Nullable)newValue;

/// The product name. This is not required.
+ (NSString * _Nullable)productName;
+ (void)setProductName:(NSString * _Nullable)value;

/// The user token. This is required.
+ (NSString * _Nullable)userToken;
+ (void)setUserToken:(NSString * _Nullable)value;

/// Boolean indidicating whether or not the SmartPeople service is running.
+ (BOOL)isEnabled;
+ (void)setIsEnabled:(BOOL)value;

/// Start the SmartPeople service.
///
/// A list of people are sent to the delegate in the form of an array of <code>PersonEntry
/// </code> objects as new data becomes available.\Important 
///
/// <code>SmartLocation
/// </code> must be enabled in order to receive new people data.
+ (void)start;

/// Stop the SmartPeople service.
+ (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The SmartPlaces service.
SWIFT_CLASS("_TtC5trnql11SmartPlaces")
@interface SmartPlaces : NSObject

/// The distance (in meters) within which to search for places. This radius also sets the threshold for the distance that must be traveled (in meters) before a new query for nearby places is performed. The search radius must be between 500 and 50,000.
+ (CLLocationDistance)searchRadius;
+ (void)setSearchRadius:(CLLocationDistance)newValue;

/// A Boolean whether or not PlaceEntry objects should include photos (if available) of the respecive place.
+ (BOOL)includeImages;
+ (void)setIncludeImages:(BOOL)value;

/// The types of places that should be searched for. See PlaceType for a list of possible values. Use nil to search for all types.
+ (NSArray<NSString *> * _Nullable)types;
+ (void)setTypes:(NSArray<NSString *> * _Nullable)newValue;

/// A Boolean indidicating whether or not the SmartPlaces service is running.
+ (BOOL)isEnabled;
+ (void)setIsEnabled:(BOOL)value;

/// Start the SmartPlaces service.
///
/// A list of places are sent to the delegate in the form of an array of <code>PlaceEntry
/// </code> objects as new data becomes available.\Important 
///
/// <code>SmartLocation
/// </code> must be enabled in order to receive new places data.
+ (void)start;

/// Stop the SmartPlaces service.
+ (void)stop;

/// Clears the previously set type filters. Future searches will be for all types.
///
/// \param types An array of place types.
+ (void)clearTypeFilters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The SmartWeather service.
SWIFT_CLASS("_TtC5trnql12SmartWeather")
@interface SmartWeather : NSObject

/// Boolean indidicating whether or not the SmartWeather service is running.
+ (BOOL)isEnabled;
+ (void)setIsEnabled:(BOOL)value;

/// Start the SmartWeather service.
///
/// Changes in weather are sent to the delegate in the form of a <code>WeatherEntry
/// </code> object.
///
/// Weather data is updated every 1000 meters or 15 minutes, whichever comes first.\Important 
///
/// <code>SmartLocation
/// </code> must be enabled in order to receive new weather data.
+ (void)start;

/// Stop the SmartWeather service.
+ (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol TrnqlDelegate;


/// trnql is an SDK that makes iOS apps smarter in minutes. Quickly and effortlessly get activity, address & location, POI, and weather updates with just a few lines of code.
SWIFT_CLASS("_TtC5trnql5Trnql")
@interface Trnql : NSObject <CLLocationManagerDelegate>

/// REQUIRES iOS 9 OR GREATER
///
/// Sets whether or not the application requires background execution.
///
/// By default (<code>requiresBackgroundExecution = false
/// </code>), when the application enters background all services are paused. Services are then automatically resumed when the application enters foreground.
///
/// If the application needs continuous updates while in the background, set <code>requiresBackgroundExecution = true
/// </code>.\Note 
///
/// <code>SmartLocation
/// </code> must be enabled in order to receive updates in the background for any service.
+ (BOOL)requiresBackgroundExecution;
+ (void)setRequiresBackgroundExecution:(BOOL)value;

/// The trnql API key.
+ (NSString * _Nullable)apiKey;
+ (void)setApiKey:(NSString * _Nullable)key;

/// :nodoc:
+ (void)initialize;

/// Add a delegate to be notified when a trnql service updates.
///
/// \param delegate The delegate to be notified of the change.
+ (void)addDelegate:(id <TrnqlDelegate> _Nonnull)delegate;

/// Remove a delegate from being notified when a trnql service updates.
///
/// \param delegate The delegate to be removed.
///
/// \param key The key of the object being observed.
+ (void)removeDelegate:(id <TrnqlDelegate> _Nonnull)delegate;

/// Starts all services including SmartActivity, SmartLocation, and SmartWeather.
+ (void)startAllServices;

/// Stops all services including SmartActivity, SmartLocation, and SmartWeather.
+ (void)stopAllServices;

/// Prints the status of and current information about trnql components including API Key, Background Execution, SmartActivity, SmartLocation, SmartPeople, SmartPlaces, and SmartWeather.
+ (void)getStatus;

/// Prints the status of and current information about trnql components including API Key, Background Execution, SmartActivity, SmartLocation, SmartPeople, SmartPlaces, and SmartWeather.
+ (void)status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;
@class WeatherEntry;


/// The TrnqlDelegate protocol defines the methods used to receive SmartActivity, SmartAddress, SmartLocation, SmartPlaces, SmartWeather, ObservableProperties, and PersistentObservableProperties updates.
SWIFT_PROTOCOL("_TtP5trnql13TrnqlDelegate_")
@protocol TrnqlDelegate
@optional

/// Tells the delegate that new activity data is available.
///
/// \param userActivity An <code>ActivityEntry
/// </code> object containing the activity data.
///
/// \param error The error object containing the reason the activity could not be retrieved.
- (void)smartActivityChange:(ActivityEntry * _Nullable)userActivity error:(NSError * _Nullable)error;

/// Tells the delegate that new address data is available.
///
/// \param address An <code>AddressEntry
/// </code> object containing the address data.
///
/// \param error The error object containing the reason the address could not be retrieved.
- (void)smartAddressChange:(AddressEntry * _Nullable)address error:(NSError * _Nullable)error;

/// Tells the delegate that new location data is available.
///
/// \param location An <code>ActivityEntry
/// </code> object containing the location data.
///
/// \param error The error object containing the reason the location could not be retrieved.
- (void)smartLocationChange:(LocationEntry * _Nullable)location error:(NSError * _Nullable)error;

/// Tells the delegate that new people data is available.
///
/// \param location An array of <code>PersonEntry
/// </code> objects containing the person data.
///
/// \param error The error object containing the reason the list of people could not be retrieved.
- (void)smartPeopleChange:(NSArray<PersonEntry *> * _Nullable)people error:(NSError * _Nullable)error;

/// Tells the delegate that new places data is available.
///
/// \param location An array of <code>PlacesEntry
/// </code> objects containing the places data.
///
/// \param error The error object containing the reason the list of places could not be retrieved.
- (void)smartPlacesChange:(NSArray<PlaceEntry *> * _Nullable)places error:(NSError * _Nullable)error;

/// Tells the delegate that new weather data is available.
///
/// \param weather A <code>WeatherEntry
/// </code> object containing the weather data.
///
/// \param error The error object containing the reason the weather could not be retrieved.
- (void)smartWeatherChange:(WeatherEntry * _Nullable)weather error:(NSError * _Nullable)error;

/// Tells the delegate that an observed property has been changed.
///
/// \param object The newly changed object.
///
/// \param key The key of the object being observed.
- (void)observablePropertyChange:(id _Nullable)object key:(NSString * _Nonnull)key;
@end


SWIFT_CLASS("_TtC5trnql10Trnqlytics")
@interface Trnqlytics : NSObject
+ (void)initialize;

/// Reports that a screen with a given name became active.
///
/// \param name The name of the screen.
+ (void)screenBecameActive:(NSString * _Nonnull)name;

/// Reports that a screen with a given name became inactive.
///
/// \param name The name of the screen.
+ (void)screenBecameInactive:(NSString * _Nonnull)name;

/// Reports that the location updated to a given location.
///
/// \param location The new location.
+ (void)locationChangedTo:(CLLocation * _Nonnull)location;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A container class which holds and provides access to a variety of weather data.
SWIFT_CLASS("_TtC5trnql12WeatherEntry")
@interface WeatherEntry : NSObject <NSCoding>

/// Details about the current weather conditions (not the weekly forecast).
@property (nonatomic, readonly, strong) CurrentConditions * _Nullable currentConditions;

/// An array which holds up to 10 days worth of forecast data. Each forecast is stored in a ForecastForDay object.
@property (nonatomic, readonly, copy) NSArray<DayForecast *> * _Nullable weatherForecastArray;

/// The address associated with this weather data.
@property (nonatomic, readonly, copy) NSString * _Nullable address;

/// An NSDate object representing today's sunrise time.
@property (nonatomic, readonly, strong) NSDate * _Nullable sunriseTime;

/// An NSDate object representing today's sunset time.
@property (nonatomic, readonly, strong) NSDate * _Nullable sunsetTime;

/// A summary of the current weather conditions.
@property (nonatomic, readonly, copy) NSString * _Nullable currentConditionsDescriptionString;

/// A nicely formatted string of the address.
@property (nonatomic, readonly, copy) NSString * _Nullable addressString;

/// The "feels like" description of the current conditions.
@property (nonatomic, readonly, copy) NSString * _Nullable feelsLikeTempString;

/// A formatted version of the humidity (with units).
@property (nonatomic, readonly, copy) NSString * _Nullable humidityString;

/// A formatted version of the wind (with units).
@property (nonatomic, readonly, copy) NSString * _Nullable windString;

/// A formatted version of the rain (with units).
@property (nonatomic, readonly, copy) NSString * _Nullable rainString;

/// A summary of up to 10 days of weather forecast information for debugging.
@property (nonatomic, readonly, copy) NSString * _Nullable forecastString;

/// A human readable time for sunrise (for display in UI).
@property (nonatomic, readonly, copy) NSString * _Nullable sunriseTimeString;

/// A human readable time for sunset (for display in UI).
@property (nonatomic, readonly, copy) NSString * _Nullable sunsetTimeString;

/// A human readable version of UV index (eg: high, medium, low), instead of just a number.
@property (nonatomic, readonly, copy) NSString * _Nullable uvIndexString;

/// A summary of the entire WeatherEntry object for debugging purposes.
@property (nonatomic, readonly, copy) NSString * _Nullable weatherSummaryString;

/// A simple string that can be displayed in a UI, which includes both high and low temp values for the day. Eg: "Hi: 80F | Lo: 50F".
@property (nonatomic, readonly, copy) NSString * _Nullable highLowString;

/// A simple string that can be displayed in a UI, which includes both the humidity and rain forecasts for the day. Eg: "Rain: 1 in, Humidity: 80%".
@property (nonatomic, readonly, copy) NSString * _Nullable humidityAndRainString;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// A convenience class used to return some CurrentConditions properties as nicely formatted Strings.
SWIFT_CLASS("_TtC5trnql18WeatherStringUtils")
@interface WeatherStringUtils : NSObject

/// \returns  A summary of the current weather conditions.
+ (NSString * _Nullable)getCurrentConditionsDescriptionAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A nicely formatted string of the address.
+ (NSString * _Nullable)getAddressAsString:(WeatherEntry * _Nonnull)we;

/// \returns  The "feels like" description of the current conditions.
+ (NSString * _Nullable)getFeelsLikeTempAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A formatted version of the humidity (with units).
+ (NSString * _Nullable)getHumidityAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A formatted version of the wind (with units).
+ (NSString * _Nullable)getWindAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A formatted version of the rain (with units).
+ (NSString * _Nullable)getRainAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A summary of up to 10 days of weather forecast information for debugging.
+ (NSString * _Nullable)getForecastAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A human readable time for sunrise (for display in UI).
+ (NSString * _Nullable)getSunriseAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A human readable time for sunset (for display in UI).
+ (NSString * _Nullable)getSunsetAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A human readable version of UV index (eg: high, medium, low), instead of just a number.
+ (NSString * _Nullable)getUVIndexAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A summary of the entire WeatherEntry object for debugging purposes.
+ (NSString * _Nullable)getWeatherSummaryAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A simple string that can be displayed in a UI, which includes both high and low temp values for the day. Eg: "Hi: 80F | Lo: 50F".
+ (NSString * _Nullable)getHiLoAsString:(WeatherEntry * _Nonnull)we;

/// \returns  A simple string that can be displayed in a UI, which includes both the humidity and rain forecasts for the day. Eg: "Rain: 1 in, Humidity: 80%".
+ (NSString * _Nullable)getHumidityAndRainAsString:(WeatherEntry * _Nonnull)we;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
